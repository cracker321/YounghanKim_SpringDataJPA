package study.datajpa.repository;

import study.datajpa.entity.Member;

import java.util.List;

/*
< 추상 클래스 >
- 하나 이상의 추상 메소드를 가지고 있는 클래스.
  일반 메소드와 추상 메소드가 섞여 있어도 되고,
  추상 메소드끼리만 구성되어 됨.

< 인터페이스 >
- 추상 메소드들로만 구성되어 있는 클래스.
- final을 붙일 수 없고, 인터페이스 내부의 변수들은 static이어야만 한다. 즉, 인터페이스는 일반변수들을 가질 수 없음.
 */


//--------------------------------------------------------------------------------------------------


//[ '사용자 정의 리포지토리 구현'강  03:00 ] 실전! 스프링 데이터 JPA. pdf p47


//- 순서
//  1.'레퍼지터리(인터페이스) MemberRepository'가 '다중상속' 하고 있는 인터페이스 2개 중에 하나가
//  바로 이 '사용자 정의 인터페이스 MemberRepositoryCustom'이고,
//  (하나는 '스프링 데이터 JPA의 내장 인터페이스 JpaRepository'이고,
//   하나는 '사용자 정의 레퍼지터리를 만들기 위해 생성한 사용자 정의 인터페이스 MemberRepositoryCustom'임)
//  2.그 '사용자 정의 인터페이스 MemberRepositoryCustom' 내부의 추상 메소드들의 구현부들을 작성해주기 위해
//  '클래스 MemberRepositoryCustom'을 작성해줌.
//  3.'구체화하는 클래스 MemberRepositoryCustom'의 내부에 '구체화 메소드 findMemberCustom'을 작성해줌.

//- 이를 통해,
//  1.외부 클래스 어딘가(여기서는 '클래스 MemberRepsoitoryTest')에서 '레퍼지터리(인터페이스) MemberRepsotory'를 참조하여
//  2.'MemberRepositoryImpl의 내부 메소드 findMemberCustom을
//  호출('memberRepository.findMemberCustom' 이렇게 작성)할 수 있게 된다!

//- 주로 복잡한 쿼리르 사용할 때 활용하는 'Query DSL'을 사용할 때, 이 '사용저 정의 인터페이스 ~~Custom'을 실무에서 자주 사용함.


//--------------------------------------------------------------------------------------------------


public interface MemberRepositoryCustom {

    //=========================================================================================================


    //[ '사용자 정의 리포지토리 구현'강  00:00 ] 실전! 스프링 데이터 JPA. pdf p47

    //- 아래 추상메소드(다른 곳의 '레퍼지터리 메소드'와 동일한 기능)의 내부 구현부 구현은
    //  '클래스 MemberRepositoryImpl의 내부 레퍼지터리 메소드 findMemberCustom'에서 구현함.
    List<Member> findMemberCustom();




    //--------------------------------------------------------------------------------------------------



    //--------------------------------------------------------------------------------------------------





    //=========================================================================================================




    //=========================================================================================================





    //=========================================================================================================



}
